# =============================================================================
# UMGEBUNGSKONFIGURATION
# =============================================================================

# Laufzeitumgebung der Anwendung
# Optionen: development, production, test
# - development: Alle CORS-Origins erlaubt, ausführliches Logging
# - production: Nur spezifische CORS-Origins, reduziertes Logging
# - test: Für automatisierte Tests
NODE_ENV=development
# NODE_ENV=production
# NODE_ENV=test

# Port auf dem der Server läuft
# Standard: 3000
# Beispiel für verschiedene Umgebungen:
PORT=3000
# PORT=8080    # Alternative für lokale Entwicklung
# PORT=80      # Standard HTTP Port für Produktion
# PORT=443     # Standard HTTPS Port für Produktion

# =============================================================================
# CORS KONFIGURATION (Cross-Origin Resource Sharing)
# =============================================================================

# Erlaubte Origins für CORS-Requests (kommagetrennt)
# Nur relevant wenn NODE_ENV=production
# In development sind alle Origins erlaubt
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4200

# Beispiele für verschiedene Szenarien:
# Lokale Entwicklung mit mehreren Ports:
# ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4200,http://localhost:8080

# Produktion mit verschiedenen Domains:
# ALLOWED_ORIGINS=https://petsitterconnect.com,https://www.petsitterconnect.com,https://app.petsitterconnect.com

# Staging/Test-Umgebung:
# ALLOWED_ORIGINS=https://staging.petsitterconnect.com,https://test.petsitterconnect.com

# =============================================================================
# API KONFIGURATION
# =============================================================================

# URL-Präfix für alle API-Endpunkte
# Standard: api/v1
# Beispiele:
API_PREFIX=api/v1
# API_PREFIX=api/v2          # Für neue API-Version
# API_PREFIX=petsitter/api   # Spezifischer Präfix
# API_PREFIX=                # Kein Präfix (direkt unter root)

# API-Versionsnummer (wird in Logs und Responses angezeigt)
API_VERSION=1.0.0
# API_VERSION=2.1.3     # Semantic Versioning
# API_VERSION=beta-1.0  # Beta-Version

# =============================================================================
# LOGGING KONFIGURATION
# =============================================================================

# Log-Level bestimmt welche Nachrichten ausgegeben werden
# Optionen: debug, log, warn, error
# - debug: Alle Nachrichten (sehr ausführlich, nur für Entwicklung)
# - log: Standard-Nachrichten + Warnungen + Fehler
# - warn: Nur Warnungen + Fehler
# - error: Nur Fehler
LOG_LEVEL=debug

# Beispiele für verschiedene Umgebungen:
# LOG_LEVEL=debug    # Entwicklung: Alle Details
# LOG_LEVEL=log      # Staging: Standard-Logging
# LOG_LEVEL=warn     # Produktion: Nur wichtige Meldungen
# LOG_LEVEL=error    # Produktion (minimal): Nur Fehler

# =============================================================================
# RATE LIMITING (für zukünftige Verwendung)
# =============================================================================

# Zeitfenster für Rate Limiting in Sekunden
RATE_LIMIT_TTL=60

# Maximale Anzahl Requests pro Zeitfenster
RATE_LIMIT_LIMIT=100

# Beispiele für verschiedene Szenarien:
# Entwicklung (sehr liberal):
# RATE_LIMIT_TTL=60
# RATE_LIMIT_LIMIT=1000

# Produktion (moderat):
# RATE_LIMIT_TTL=60
# RATE_LIMIT_LIMIT=100

# Öffentliche API (streng):
# RATE_LIMIT_TTL=60
# RATE_LIMIT_LIMIT=20

# Premium-Benutzer:
# RATE_LIMIT_TTL=60
# RATE_LIMIT_LIMIT=500
